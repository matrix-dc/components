apiVersion: v1
kind: ConfigMap
metadata:
  name: kube-certs
  namespace: {{ .Release.Namespace }}
data:
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-proxy-template
  namespace: {{ .Release.Namespace }}
data:
  haproxy.tpl: |
    {{`
    global
        log 127.0.0.1 local2
        chroot /var/lib/haproxy
        stats socket /var/lib/haproxy/haproxy.sock mode 777 level admin expose-fd listeners
        stats timeout 600s
        user haproxy
        group haproxy
        daemon
        tune.ssl.default-dh-param 2048
        hard-stop-after 60s
        ssl-default-bind-options no-sslv3 no-tlsv10
        ssl-default-bind-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK


    defaults
        mode                    http
        log                     global
        option                  dontlognull
        option                  http-server-close
        option                  redispatch
        retries                 3
        timeout http-request    5000
        timeout queue           30000
        timeout check           5000
        timeout connect         5s
        timeout client          3600s
        timeout client-fin      1s
        timeout server          3600s
        timeout server-fin      1s
        timeout http-request    10s
        timeout http-keep-alive 300s
        maxconn                 50000

    listen stats
        bind *:8889
        mode http
        stats uri /tenx-stats
        stats realm Haproxy\ Statistics
        stats auth tenxcloud:haproxy-agent

    {{with .DefaultHTTP}}
    listen defaulthttp
        bind {{$.PublicIP}}:8080
        mode http
        option forwardfor       except 127.0.0.0/8
        errorfile 503 /etc/haproxy/errors/503.http{{range .Redirect}}{{if not .PreferIPv6}}
        redirect scheme https code 301 if { hdr(Host) -i {{range .DomainNames}} {{.}}{{end}} } !{ ssl_fc }{{end}}{{end}}{{range .Domains}}{{if not .PreferIPv6}}
        acl {{.BackendName}} hdr(host) -i {{range .DomainNames}} {{.}}{{end}}
        use_backend {{.BackendName}} if {{.BackendName}}{{end}}{{end}}{{end}}

    {{if .PublicIPv6 }}{{with .DefaultHTTP}}
    listen defaulthttp-ipv6
        bind {{$.PublicIPv6}}:8080
        mode http
        option forwardfor
        errorfile 503 /etc/haproxy/errors/503.http{{range .Redirect}}{{if .PreferIPv6}}
        redirect scheme https code 301 if { hdr(Host) -i {{range .DomainNames}} {{.}}{{end}} } !{ ssl_fc }{{end}}{{end}}{{range .Domains}}{{if .PreferIPv6}}
        acl {{.BackendName}} hdr(host) -i {{range .DomainNames}} {{.}}{{end}}
        use_backend {{.BackendName}} if {{.BackendName}}{{end}}{{end}}{{end}}{{end}}

    {{with .FrontendLB}}
    frontend LB
        mode http
        option forwardfor       except 127.0.0.0/8
        errorfile 503 /etc/haproxy/errors/503.http
        bind {{$.PublicIP}}:8443 ssl crt {{.DefaultSSLCert}}{{range .SSLCerts}} crt {{.}}{{end}}{{range .Domains}}{{if not .PreferIPv6}}
        acl {{.BackendName}} hdr(host) -i {{range .DomainNames}} {{.}}{{end}}
        use_backend {{.BackendName}} if {{.BackendName}} { ssl_fc_sni{{range .DomainNames}} {{.}}{{end}} }{{end}}{{end}}{{end}}

    {{if .PublicIPv6 }}{{with .FrontendLB}}
    frontend LB-ipv6
        mode http
        option forwardfor
        errorfile 503 /etc/haproxy/errors/503.http
        bind {{$.PublicIPv6}}:8443 ssl crt {{.DefaultSSLCert}}{{range .SSLCerts}} crt {{.}}{{end}}{{range .Domains}}{{if .PreferIPv6}}
        acl {{.BackendName}} hdr(host) -i {{range .DomainNames}} {{.}}{{end}}
        use_backend {{.BackendName}} if {{.BackendName}} { ssl_fc_sni{{range .DomainNames}} {{.}}{{end}} }{{end}}{{end}}{{end}}{{end}}

    {{with .Listen}}{{range .}}{{if not .PreferIPv6}}
    listen {{.DomainName}}
        bind {{$.PublicIP}}:{{.PublicPort}}
        mode tcp
        balance roundrobin{{$port := .Port}}{{range .Pods}}
        server {{.Name}} {{.IP}}:{{$port}} maxconn 5000{{end}}{{end}}{{end}}{{end}}

    {{if .PublicIPv6 }}{{with .Listen}}{{range .}}{{if .PreferIPv6}}
    listen {{.DomainName}}
        bind {{$.PublicIPv6}}:{{.PublicPort}}
        mode tcp
        balance roundrobin{{$port := .Port}}{{range .Pods}}
        server {{.Name}} {{.IP}}:{{$port}} maxconn 5000{{end}}{{end}}{{end}}{{end}}{{end}}

    {{with .Backend}}{{range .}}
    backend {{.BackendName}}{{$port := .Port}}{{range .Pods}}
        server {{.Name}} {{.IP}}:{{$port}} cookie {{.Name}} check maxconn 5000{{end}}{{end}}{{end}}
    `}}
